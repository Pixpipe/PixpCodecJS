{"version":3,"file":null,"sources":["../src/PixpEncoder.js","../src/PixpDecoder.js"],"sourcesContent":["/*\n  Ressources:\n  https://developers.google.com/web/updates/2012/06/How-to-convert-ArrayBuffer-to-and-from-String\n\n*/\n\n\n/**\n* A binary pixp blob is composed of a study sidecar and at least one block.\n* A study sidecar is composed of:\n* - 4 bytes ( 1 unsigned int 32 ) to encode the study sidecar length\n* - x bytes ( x/2 unsigned int 16 ) to encode the study sidecar as a unicode JSON string\n*\n* As a JSON object, the study sidecar is composed of 2 things:\n* - an array with the first-byte index of each block\n* - a study metadata object\n* \n*\n* A block is the concatenation of these 3 things:\n* - 4 bytes ( 1 unsigned int 32 ) to encode the sidecar length\n* - n bytes ( n/2 unsigned int 16 ) to encode the sidecar as a unicode JSON string\n* - m bytes of data\n* \n* Each block has a length of 4 + n + m bytes.\n* The n and m sizes vary from one block to the other.\n*\n* As a JSON object, each block's sidecar is composed of 2 things:\n* - the encodingMetadata, that carries info about data type (\"int\", \"float\", \"json\"), data nb of bytes per element (8, 16 , 32, 64) and if data is made of signed of unsigned data (true or false)\n* - the metadata set by the user for this block\n*/\n\nclass PixpEncoder {\n  constructor(){\n    // list of [ encoding metadata + original metadata]\n    this._sidecarBuffers = []\n    this._dataBuffers = [];\n    this._studyMetadata = {};\n  }\n  \n  \n  /**\n  * Add a new dataset to the encoder. It will add it after the other.\n  * @param {Object} data - can be a typed array of an object. If an object, it will be converted into a JSON string\n  * @param {Object} metadata - will be converted into a JSON string\n  * @param {String} originalType - additional information about the original type of the data. In Pixpipe, this could be \"Image2D\" or \"Image3D\" so that this string could be used directly as a constructor.\n  */\n  addBlock( data, metadata, originalType = null ){\n    var encoding = {};\n    encoding.originalType = originalType;\n\n    var dataBuffer = null;\n    var metadataBuffer = null;\n    \n    // the data is a typed Array\n    if( this._isTypedArray( data ) ){\n      var spec = this._getTypedArraySpec(data)\n      encoding.bytesPerElement = spec.bytesPerElement;\n      encoding.dataType = spec.dataType;\n      encoding.signed = spec.signed\n      dataBuffer = data.buffer;\n    }\n    // the data is a complex object/number/string\n    else{\n      dataBuffer = this._objectToUnicodeBuffer( data ).buffer;\n      encoding.bytesPerElement = 2; // unicode char\n      encoding.dataType = \"json\";\n      encoding.signed = false;\n    }\n    \n    encoding.byteLength = dataBuffer.byteLength;\n    \n    var sidecar = {\n      encodingMetadata: encoding,\n      originalMetadata: metadata\n    }\n    \n    var sidecarBuffer = this._objectToUnicodeBuffer( sidecar ).buffer;\n    \n    this._sidecarBuffers.push( sidecarBuffer );\n    this._dataBuffers.push( dataBuffer )\n  }\n  \n  \n  setStudyMetadata( obj ){\n    this._studyMetadata = obj;\n  }\n  \n  \n  blocksToBlob(){\n    if( this._sidecarBuffers.length != this._dataBuffers.length ){\n      console.warn( \"The blob cannot be made. The amount of metadata obejct differs from the amount of data object\");\n      return;\n    }\n    \n    // the positions first byte of each block. (and computing the total buffer size all at once)\n    var blockStarts = []\n    var bufferPosition = 0;\n    \n    for(var i=0; i<this._dataBuffers.length; i++){\n      blockStarts.push( bufferPosition );\n      \n      // adding the size of both buffer\n      bufferPosition += (this._sidecarBuffers[i].byteLength + this._dataBuffers[i].byteLength);\n      \n      // adding 4 bytes (1 Uint32) for encoding block sidecar length\n      bufferPosition += 4;\n    }\n    \n    var studySidecar = {\n      blockStarts: blockStarts,\n      studyMetadata: this._studyMetadata\n    }\n    \n    var studySidecarBuffer = this._objectToUnicodeBuffer( studySidecar ).buffer;\n    \n    var str = String.fromCharCode( ...(new Uint16Array(studySidecarBuffer)) );\n    \n    if( !studySidecarBuffer ){\n      console.warn(\"Study metadata may contain cyclic reference, cannot create blob.\");\n      return;\n    }\n\n    var blobArray = [];\n\n    \n    // the size of the study sidecar\n    blobArray.push( new Uint32Array([ studySidecarBuffer.byteLength ]).buffer )\n    \n    // the study sidecar\n    blobArray.push( studySidecarBuffer )\n    \n    for(var i=0; i<this._dataBuffers.length; i++){\n      // the block's sidecar length\n      blobArray.push( new Uint32Array([ this._sidecarBuffers[i].byteLength ]).buffer );\n      \n      // the block's sidecar\n      blobArray.push( this._sidecarBuffers[i] );\n      \n      // the block's data\n      blobArray.push( this._dataBuffers[i] );\n    }\n    \n    var finalBlob = new Blob( blobArray, {type: 'application/octet-binary'} );\n    return finalBlob;\n  }\n  \n  \n  /**\n  * Takes a JS object, convert it to a JSON string, and then to a Uint16Array that corresponds to \n  * a unicode string\n  */\n  _objectToUnicodeBuffer( obj ){\n    var buffer = null;\n    var jsonStr = this._toJsonString( obj );\n    buffer = this._stringToUnicodeBuffer( jsonStr );\n    return buffer;\n  }\n  \n  \n  /**\n  * Takes a String and convert it into a Uint16Array buffer that represent a unicode buffer\n  * @param {String} str - the string to encode\n  * @return {Uint16Array} the unicode buffer\n  */\n  _stringToUnicodeBuffer( str ){\n    if( !str )\n      return null;\n    \n    var buffer = new Uint16Array(str.length); // 2 bytes for each char\n    for (var i=0; i < str.length; i++) {\n      buffer[i] = str.charCodeAt(i);\n    }\n    return buffer;\n  }\n  \n  \n  /**\n  * [PRIVATE]\n  * Convert an object into a JSON string. Returns null in case of failure (ie. cyclic reference)\n  * @param {Object} obj - a JS object or array\n  * @return {String} the stringified JSON result\n  */\n  _toJsonString( obj ){\n    var jsonStr = null;\n    \n    try{\n      jsonStr = JSON.stringify( obj );\n    }catch(e){\n      console.warn(e);\n    }\n    return jsonStr;\n  }\n  \n  \n  /**\n  * [PRIVATE]\n  * Tells if an object is a typed array\n  * @param {Object} obj - object to test if it's a typed array\n  * @return {Boolean} true if a typed array, false if not\n  */\n  _isTypedArray( obj ){\n    if( !obj )\n      return false;\n      \n    return (\n      obj instanceof Int8Array ||\n      obj instanceof Uint8Array ||\n      obj instanceof Uint8ClampedArray ||\n      obj instanceof Int16Array ||\n      obj instanceof Uint16Array ||\n      obj instanceof Int32Array ||\n      obj instanceof Uint32Array ||\n      obj instanceof Float32Array ||\n      obj instanceof Float64Array );\n  }\n  \n  \n  /**\n  * Get infomation about the data used in a typed array:\n  * - nb bytes per element\n  * - data type: float or int\n  * - signed or unsigned\n  */\n  _getTypedArraySpec( arr ){\n    \n    var spec = {\n      bytesPerElement: arr.BYTES_PER_ELEMENT,\n      dataType: null,\n      signed: null\n    }\n    \n    if( arr instanceof Int8Array ){\n      spec.dataType = \"int\";\n      spec.signed = false;\n    }else if(arr instanceof Uint8Array){\n      spec.dataType = \"int\";\n      spec.signed = true;\n    }else if(arr instanceof Uint8ClampedArray){\n      spec.dataType = \"int\";\n      spec.signed = true;\n    }else if(arr instanceof Int16Array){\n      spec.dataType = \"int\";\n      spec.signed = false;\n    }else if(arr instanceof Uint16Array){\n      spec.dataType = \"int\";\n      spec.signed = true;\n    }else if(arr instanceof Int32Array){\n      spec.dataType = \"int\";\n      spec.signed = false;\n    }else if(arr instanceof Uint32Array){\n      spec.dataType = \"int\";\n      spec.signed = true;\n    }else if(arr instanceof Float32Array){\n      spec.dataType = \"float\";\n      spec.signed = false;\n    }else if(arr instanceof Float64Array){\n      spec.dataType = \"float\";\n      spec.signed = false;\n    }\n    \n    return spec;\n  }\n  \n  \n} /* END of class PixpEncoder */\n\nexport { PixpEncoder }\n","\nclass PixpDecoder {\n  \n  constructor(){\n    \n  }\n  \n  blobToBlocks( blob ){\n    \n    var fileReader = new FileReader();\n    \n    fileReader.onload = function() {\n        var inputBuffer = this.result;\n        var view = new DataView( inputBuffer, true );\n        \n        // size of the study sidecar\n        var studySidecarLength = view.getUint32( 0 );\n        var studySidecarBuffer = new Uint16Array( inputBuffer.slice( 4, 4 + studySidecarLength ) );\n        var studySidecar = String.fromCharCode( ...studySidecarBuffer );\n        console.log( studySidecar );\n        \n    };\n    fileReader.readAsArrayBuffer(blob);\n  }\n  \n} /* END of class PixpDecoder */\n\nexport { PixpDecoder }\n"],"names":[],"mappings":"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"}